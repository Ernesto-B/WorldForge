name: CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SONAR_SCANNER_OPTS: "-Xmx512m"

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Python Setup
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Cache pip Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt')}}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        working-directory: ./backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Lint Using flake8
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run Tests with Coverage
        working-directory: ./backend
        env:
          PYTHONPATH: ${{ github.workspace }}/backend
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
        run: |
          source .venv/bin/activate
          pytest --cov=app --cov-report=xml:reports/coverage.xml --junitxml=reports/results.xml

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: backend/reports/coverage.xml

      - name: Upload Pytest JUnit Results
        uses: actions/upload-artifact@v4
        with:
          name: junit-results
          path: backend/reports/results.xml

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=Ernesto-B_WorldForge
            -Dsonar.organization=ernesto-b
            -Dsonar.sources=./backend
            -Dsonar.python.coverage.reportPaths=./backend/reports/coverage.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Bandit Security Scan
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          bandit -r app -f xml -o reports/bandit-report.xml || true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: backend/reports/bandit-report.xml

      - name: Run JMeter Performance Test (If Available)
        if: ${{ github.event_name != 'pull_request' && hashFiles('backend/tests/load_tests.jmx') != ''}}
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          sudo apt-get update
          sudo apt-get install -y jmeter
          jmeter -n -t tests/load_tests.jmx -l reports/results.jtl

      - name: Upload JMeter Results
        if: ${{ github.event_name != 'pull_request' && hashFiles('backend/tests/load_tests.jmx') != ''}}
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results
          path: backend/reports/results.jtl

      - name: Generate Coverage HTML Report
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          coverage html -d reports/coverage

      - name: Generate JUnit HTML Report
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          pip install junit2html
          junit2html reports/results.xml reports/junit-report.html

      - name: Generate Bandit HTML Report
        working-directory: ./backend
        run: |
          source .venv/bin/activate
          bandit -r app -f html -o reports/bandit-report.html || true

      - name: Generate JMeter HTML Report
        if: ${{ github.event_name != 'pull_request' && hashFiles('backend/tests/load_tests.jmx') != ''}}
        working-directory: ./backend
        run: |
          mkdir -p reports/jmeter
          jmeter -g reports/results.jtl -o reports/jmeter

      - name: Extract Latest Commit Info
        id: commit_info
        run: |
          # echo "COMMIT_MESSAGE=$(git log -1 --pretty=%B)" >> $GITHUB_ENV
          {
            echo "COMMIT_MESSAGE<<EOF"
            git log -1 --pretty=%B
            echo "EOF"
          } >> $GITHUB_ENV
          echo "COMMIT_TIMESTAMP=$(git log -1 --format=%cd --date=iso)" >> $GITHUB_ENV
          echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Save Commit Info to File
        run: |
          echo "Commit Message: $COMMIT_MESSAGE" > backend/reports/commit_info.txt
          echo "Commit Timestamp: $COMMIT_TIMESTAMP" >> backend/reports/commit_info.txt
          echo "Commit SHA: $COMMIT_SHA" >> backend/reports/commit_info.txt

      - name: Upload All Reports as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: full-report-folder
          path: backend/reports/


  deploy-reports:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Download Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: full-report-folder
          path: public

      - name: Setup GH Pages
        uses: actions/configure-pages@v4

      - name: Copy index File to public Site
        run: cp backend/report-site/index.html public/

      - name: Deploy to GH Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
